<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="xcx.com.dao.TestMapper">
  <resultMap id="BaseResultMap" type="xcx.com.domain.Test">
    <id column="tid" jdbcType="INTEGER" property="tid" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="type" jdbcType="VARCHAR" property="type" />
    <result column="year" jdbcType="VARCHAR" property="year" />
    <result column="month" jdbcType="VARCHAR" property="month" />
    <result column="des" jdbcType="VARCHAR" property="des" />
    <result column="dj" jdbcType="VARCHAR" property="dj" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    tid, `name`, `type`, `year`, `month`, des, dj
  </sql>
  <select id="selectByExample" parameterType="xcx.com.example.TestExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from test
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from test
    where tid = #{tid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from test
    where tid = #{tid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="xcx.com.example.TestExample">
    delete from test
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyColumn="tid" keyProperty="tid" parameterType="xcx.com.domain.Test" useGeneratedKeys="true">
    insert into test (`name`, `type`, `year`, 
      `month`, des, dj)
    values (#{name,jdbcType=VARCHAR}, #{type,jdbcType=VARCHAR}, #{year,jdbcType=VARCHAR}, 
      #{month,jdbcType=VARCHAR}, #{des,jdbcType=VARCHAR}, #{dj,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" keyColumn="tid" keyProperty="tid" parameterType="xcx.com.domain.Test" useGeneratedKeys="true">
    insert into test
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="name != null">
        `name`,
      </if>
      <if test="type != null">
        `type`,
      </if>
      <if test="year != null">
        `year`,
      </if>
      <if test="month != null">
        `month`,
      </if>
      <if test="des != null">
        des,
      </if>
      <if test="dj != null">
        dj,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        #{type,jdbcType=VARCHAR},
      </if>
      <if test="year != null">
        #{year,jdbcType=VARCHAR},
      </if>
      <if test="month != null">
        #{month,jdbcType=VARCHAR},
      </if>
      <if test="des != null">
        #{des,jdbcType=VARCHAR},
      </if>
      <if test="dj != null">
        #{dj,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="xcx.com.example.TestExample" resultType="java.lang.Long">
    select count(*) from test
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update test
    <set>
      <if test="record.tid != null">
        tid = #{record.tid,jdbcType=INTEGER},
      </if>
      <if test="record.name != null">
        `name` = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.type != null">
        `type` = #{record.type,jdbcType=VARCHAR},
      </if>
      <if test="record.year != null">
        `year` = #{record.year,jdbcType=VARCHAR},
      </if>
      <if test="record.month != null">
        `month` = #{record.month,jdbcType=VARCHAR},
      </if>
      <if test="record.des != null">
        des = #{record.des,jdbcType=VARCHAR},
      </if>
      <if test="record.dj != null">
        dj = #{record.dj,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update test
    set tid = #{record.tid,jdbcType=INTEGER},
      `name` = #{record.name,jdbcType=VARCHAR},
      `type` = #{record.type,jdbcType=VARCHAR},
      `year` = #{record.year,jdbcType=VARCHAR},
      `month` = #{record.month,jdbcType=VARCHAR},
      des = #{record.des,jdbcType=VARCHAR},
      dj = #{record.dj,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="xcx.com.domain.Test">
    update test
    <set>
      <if test="name != null">
        `name` = #{name,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        `type` = #{type,jdbcType=VARCHAR},
      </if>
      <if test="year != null">
        `year` = #{year,jdbcType=VARCHAR},
      </if>
      <if test="month != null">
        `month` = #{month,jdbcType=VARCHAR},
      </if>
      <if test="des != null">
        des = #{des,jdbcType=VARCHAR},
      </if>
      <if test="dj != null">
        dj = #{dj,jdbcType=VARCHAR},
      </if>
    </set>
    where tid = #{tid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="xcx.com.domain.Test">
    update test
    set `name` = #{name,jdbcType=VARCHAR},
      `type` = #{type,jdbcType=VARCHAR},
      `year` = #{year,jdbcType=VARCHAR},
      `month` = #{month,jdbcType=VARCHAR},
      des = #{des,jdbcType=VARCHAR},
      dj = #{dj,jdbcType=VARCHAR}
    where tid = #{tid,jdbcType=INTEGER}
  </update>
  <select id="selectTestType" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from test
    group by type
  </select>
</mapper>